syntax = "proto3";

option optimize_for = SPEED;

import "osi_version.proto";
import "osi_common.proto";

package osi3;

message imu{
    //quaternion definition
    message Quaternion{
        double qx = 1;
        double qy = 2;   
        double qz = 3;    
        double qw = 4;
    }

    //euler angle, unit rad
    message EulerAngle{
        double roll = 1;
        double pitch = 2;
        double yaw =3 ;
    }

    //imu sensor config
    message IMUCfg{
        string name = 1;
        Vector3d position = 2;
        Quaternion orientation = 3;
        EulerAngle euler = 4;
    }

    //wheel speed
    message WheelSpd{
        double wheelSpdRL = 1;          // m/s, rear left wheel speed
        double wheelSpdRR = 2;          // m/s, rear right wheel speed
    }

    //gps coord
    message GNSSData{
        double longti = 1;                //deg
        double lat = 2;                 //deg
        double alt = 3;                 //deg
    } 


    //imu sensor data
    message IMUSensorData{
        Vector3d accel = 1;             // unit is g(9.8003266714 m/s2), x,y,z
        Vector3d angular_v = 2;         // deg/s, angular speed around x,y,z axis
        WheelSpd wheelspd = 3;          // km/h  
    }

    //imu ground truth
    message IMUGroundTruth{
        Vector3d position =1;                   // m, 
        GNSSData gnss = 2;				        // gnss data
        Vector3d velocity = 3;                  // m/s
        Vector3d velocity_truth = 4;            // m/s
        Vector3d acc = 5;                       // m/s2
        Vector3d acc_truth = 6;                 // m/s2
        Quaternion quatRot = 7;                 // rotation 
        Quaternion quatRot_truth = 8;           // rotation 
        double dist_2_gps = 9;                  // m
    }

    //imu rigid body in enu/global
    message IMURigidENUGNSS{
        Vector3d posENU = 1;            //position in enu, m
        GNSSData gnss = 2;              //position in gnss, deg
        Vector3d velocity = 3;          //velocity in enu, m/s
        EulerAngle eulerAngle = 4;      //tranform in enu, rad
        Quaternion quatRot = 5;         //rotation in enu,
    }

    // The interface version used by the sender (i.e. the simulation
    // environment).
    //
    InterfaceVersion version = 1;

    // The data timestamp of the simulation environment. The zero time point is
    // arbitrary but must be identical for all messages.
    // Recommendation: Zero time point for start point of the simulation.
    //
    // \note Zero time point does not need to coincide with the UNIX epoch.
    //
    // \note For ground truth data this timestamp coincides both with the
    // notional simulation time the data applies to and the time it was sent
    // (there is no inherent latency for ground truth data, as opposed to
    // sensor data).
    //
    Timestamp timestamp = 2;

    // imu mount position
    IMUCfg mount_pos = 3;

    // imu sensor data
    IMUSensorData imu_data = 4;

    // imu ground truth
    IMUGroundTruth imu_truth = 5;

    // imu rigid data
    IMURigidENUGNSS imu_rigid = 6;
}
