syntax = "proto2";

package tx_sim.record.proto;

// Section

enum SectionType {
  SECTION_UNSPECIFIED = 0;
  SECTION_HEADER = 1;
  SECTION_CHUNK_INFO = 2;
  SECTION_CHUNK_BODY = 3;
  SECTION_TOPIC = 4;
  SECTION_INDEX = 5;
  SECTION_MAX = 6;
};

message Section {
  optional SectionType type = 1;
  optional uint64 size = 2;
}

// Header

message Header {
  optional uint32 major_version = 1;
  optional uint32 minor_version = 2;
  optional uint64 chunk_interval = 3;
  optional uint64 segment_interval = 4;
  optional uint64 index_position = 5 [default = 0];
  optional uint64 chunk_number = 6 [default = 0];
  optional uint64 topic_number = 7 [default = 0];
  optional uint64 begin_time = 8 [default = 0];
  optional uint64 end_time = 9 [default = 0];
  optional uint64 message_number = 10 [default = 0];
  optional uint64 size = 11 [default = 0];
  optional bool is_complete = 12 [default = false];
  optional uint64 chunk_raw_size = 13;
  optional uint64 segment_raw_size = 14;
}

// ChunkInfo

message ChunkInfo {
  optional uint64 begin_time = 1;
  optional uint64 end_time = 2;
  optional uint64 message_number = 3;
  optional uint64 raw_size = 4;
}

// ChunkBody

message SingleMessage {
  optional string topic_name = 1;
  optional uint64 time = 2;
  optional bytes content = 3;
}

message ChunkBody {
  repeated SingleMessage messages = 1;
}

// Topic

message Topic {
  optional string name = 1;
  optional string message_type = 2;
  optional bytes proto_desc = 3;
}

// Index

message SingleIndex {
  optional SectionType type = 1;
  optional uint64 position = 2;
  oneof cache {
    TopicCache topic_cache = 31;
    ChunkInfoCache chunk_info_cache = 32;
    ChunkBodyCache chunk_body_cache = 33;
  }
}

message TopicCache {
  optional uint64 message_number = 1;
  optional string name = 2;
  optional string message_type = 3;
  optional bytes proto_desc = 4;
}

message ChunkInfoCache {
  optional uint64 message_number = 1;
  optional uint64 begin_time = 2;
  optional uint64 end_time = 3;
  optional uint64 raw_size = 4;
}

message ChunkBodyCache {
  optional uint64 message_number = 1;
}

message Index {
  repeated SingleIndex indexes = 1;
}
