
// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials

// [START declaration]
syntax = "proto3";
import "header.proto";
package sim_msg;
// [END declaration]

// [START messages]

message Control{ 
  enum CONTROL_MODE{
    CM_MANUAL = 0;
    CM_AUTO_DRIVE = 1;
    CM_ONLY_STEER = 2;
    CM_ONLY_SPEED = 3;
  }

  enum GEAR_MODE{
    NO_CONTROL=0;  
    PARK=1;  
    REVERSE=2;
    NEUTRAL=3; 
    DRIVE=4;
  }

  enum CONTROL_TYPE{
    PEDAL_CONTROL = 0;      //acc pedal, steering wheel control
    ACC_CONTROL = 1;        //target acc, target front wheel angle control
    ACC_STEER_CONTROL = 2;  //target acc, steering wheel control
  }

  message PedalControl{
    double steer = 1;      //steering wheel angle, unit deg, left positive
    double throttle = 2;   //unit %
    double brake = 3;      //unit %
  }

  message AccControl{
    double acc=1;                 //unit m/s2
    double front_wheel_angle=2;   //front wheel angle, unit rad, left positive
  }

  message AccSteerControl{
    double acc=1;                 //unit m/s2
    double steer=2;               //steering wheel angle, unit deg, left positive
  }

  enum TurnLight{
    TURN_LIGHT_OFF = 0;
    TURN_LEFT = 1;
    TURN_RIGHT = 2;
  }

  enum FogLamp{
    FOG_LAMP_OFF = 0;
    FRONT_FOG_LAMP = 1;
    REAR_FOG_LAMP = 2;
    ALL_FOG_LAMP = 3;
  }

  message BodyCommand{
    bool horn=1;               //horn, 0= OFF ; 1 = ON;
    TurnLight turn_light=2;  
    bool position_lamp=3;      //position lamp  
    bool low_beam=4;           //low beam
    bool high_beam=5;          //high beam
    bool warn_light=6;         //warning light
    FogLamp fog_lamp=7;        //fog lamp
  }

  message ChassisCommand{
    bool epb=1;                 //EPB request
  }

  message PowerTrainCommand{
    bool switch_off_engine=1;  // engine off request
  }
  
  Header header=1;
  
  CONTROL_MODE control_mode=2;
  CONTROL_TYPE contrl_type=3;
  
  GEAR_MODE gear_cmd=4;   
  PedalControl pedal_cmd=5;
  AccControl acc_cmd=6;
  BodyCommand body_cmd=7;
  ChassisCommand chassis_cmd=8;
  PowerTrainCommand powertrain_cmd=9;
  AccSteerControl acc_steer_cmd = 10;
}

//drive mode for saic
/*
enum DRIVE_MODE_SAIC{
  R_PEDAL=-1;     //-1:倒挡、踏板控制
  R_ACC=-2;       //-2：倒挡、加速度控制
  R_TORQUE=-3;    //-3：倒挡、扭矩控制
  R_DEC=-5;       //-5: 倒挡、减速度控制
  N=0;            //0：空挡
  D_PEDAL=1;      //1：D档、踏板控制
  D_ACC=2;        //2：D档、加速度控制
  D_TORQUE=3;     //3：D档、扭矩控制
  D_DEC=5;        //5: D档、减速度控制
}
*/

//control for saic
message ControlSAIC{
  double torqueReq = 1 ;        //torque request, N|M
  double steerReq = 2;          //steer wheel angle request, deg
  int32 driveModeReq = 3;       //gear request
  double brakePressureReq = 4;  //master brake cyinder pressure request, bar
  double accReq =5;             //acc request, m/s2 
}

// [END messages]
