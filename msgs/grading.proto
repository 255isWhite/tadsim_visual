// [START declaration]
syntax = "proto3";
import "basic.proto";
package sim_msg;
// [END declaration]

// [START messages]

enum GradingCollisionState
{
	GRADING_COLLISION_NOCOLLISION=0;
	GRADING_COLLISION_VEHICLE=1;
	GRADING_COLLISION_PEDESTRIAN=2;
	GRADING_COLLISION_OBSTACLE=3;
}

enum GradingAlgorithmState
{
	GRADING_ALGORITHM_RUNNING=0;
	GRADING_ALGORITHM_TIMEOUT=1;
	GRADING_ALGORITHM_THROWEXCEPTION=2;
}

enum GradingTrafficLightState
{
	GRADING_TRAFFICLIGHT_RUNNING=0;
	GRADING_TRAFFICLIGHT_JUMPREDLIGHT=1;
}

enum GradingSpeedState
{
	GRADING_SPEED_NORMAL=0;
	GRADING_SPEED_OVERHIGH=1;
	GRADING_SPEED_OVERLOW=2;
}

enum GradingAccelerationState
{
	GRADING_ACCELERATION_NORMAL=0;
	GRADING_ACCELERATION_RAPIDACCELERATE=1;
	GRADING_ACCELERATION_RAPIDDEACCELERATE=2;
}

enum GradingTimeHeadwayState
{
	GRADING_TIMEHEADWAY_NORMAL=0;
	GRADING_TIMEHEADWAY_OVERLOW=1;
}

enum GradingDistHeadwayState
{
	GRADING_DISTHEADWAY_NORMAL=0;
	GRADING_DISTHEADWAY_OVERLOW=1;
}

enum GradingPosErrorState
{
	GRADING_PosError_NORMAL=0;
	GRADING_PosError_EXCEED=1;
}

message Grading
{
	message TimeStamp
	{
		uint64 timeStamp = 1;
	}

	message Speed
	{
		double speed = 1;//unit is m/s.
		GradingSpeedState state = 2;
		double threshold = 3;
	}

	message Acceleration
	{
		double acceleration = 1;//unit is m/s^2.
		GradingAccelerationState state = 2;
		double threshold = 3;
	}

	message Collision
	{
		GradingCollisionState state = 1;//1: vehicle;2: pedestrian;3: obstacle;0: NoCollison
		Vec3 location = 2;//vehicle crash location.
	}

	message TimeHeadway
	{
		float ATH = 1;//>2.7
		GradingTimeHeadwayState state = 2;
		double threshold = 3;
	}

	message DistHeadway{
		double dist_to_fellow = 1;
		GradingDistHeadwayState dist_state = 2;
		double threshold = 3;
	}

	message Algorithm
	{
		GradingAlgorithmState state = 1;//1: crash 
	}

	message Lane
	{
		bool isOnSolidLine = 1;
		bool isOnDottedLine = 2;
		bool isOnStopLine = 3;
	}

	message TrafficLight
	{
		GradingTrafficLightState state = 1;
		uint64 run_trafficlight_thresh = 2;
		uint64 run_trafficlight_count = 3;
	}

	message Control{
		double 	posError_H = 1;
		GradingPosErrorState state = 2;
		double	threshold = 3;
	}

	message Planning{
		bool is_reachEndpoint = 1;
		Vec3 current_point = 2;
		Vec3 endpoint = 3;
	}
	
	message CarExpData
	{
		double id = 1;
		double value = 2;
	}
	
	message ExpData
	{
		repeated CarExpData distFromCar = 1;
		repeated CarExpData distFromCar_H = 2;
		repeated CarExpData distFromCar_V = 3;
		repeated CarExpData thFromCar = 4;
		repeated CarExpData dot_s_fellow = 5;	// ds/dt, m/s, traffic
		repeated CarExpData dot_x_fellow = 6;	// dx/dt, m/s, traffic
		repeated CarExpData dot_y_fellow = 7;	// dy/dt, m/s, traffic
		double dot_s_ego = 8;	// ds/dt, m/s, ego
		double dot_x_ego = 9;	// dx/dt, m/s, ego
		double dot_y_ego = 10;	// dy/dt, m/s, ego
	}
	
	message Statistics{
		message DetailItem{
			double	eval_value = 1;				//count of kpi occurance, statistics info of kpi, status of kpi
			bool	is_enabled = 2;				//if kpi is enabled
			bool	is_pass	= 3;				//pass or fail
		}

		message Detail{
			DetailItem	count_overSpeed = 1;	
			DetailItem	count_overAcceleration = 2;
			DetailItem	count_overDecelleration = 3;
			DetailItem	count_overTurningAcceleration = 4;

			DetailItem	count_tooCloseTTC = 5;
			DetailItem 	count_tooCloseDistance = 6;
			
			DetailItem	count_overMaxPosError_H = 7;
			DetailItem	average_PosError_H = 8;
			DetailItem	max_PosError_H = 9;
			DetailItem  max_PosError_H_L = 10;
			DetailItem  max_PosError_H_R = 11;

			DetailItem	count_CrossSolidLine = 12;
			DetailItem	count_RanRedLight = 13;
			DetailItem	reachEndPoint = 14;

			DetailItem	collision = 15;
		}

		message CustomDetail {
			DetailItem  	custom_ReachEndPoint = 1;
			DetailItem   	custom_maxPosError_Exceed = 2;
		}

		string 	scene_name = 1;			//scene name
		string 	report_date = 2;		//date of report 
		bool	is_pass = 3;			//pass or not
		double	total_time = 4;			//unit s
		double	total_milleage = 5;		//unit km
		bool	is_timeout = 6;			//timeout or not
		string	grading_xml = 7;		//grading xml file path

		Detail	detail = 8;				//detail
		CustomDetail	custom_detail = 9;
		string	reason = 10;			//set reason if fail, "" if pass
	}

	Speed 				speed = 1;
	Acceleration 		acceleration = 2;
	repeated Collision 	collision = 3;
	TimeHeadway 		timeHeadway = 4;
	Algorithm 			algorithm = 5;
	Lane 				lane = 6;
	TrafficLight 		trafficeLight = 7;
	TimeStamp 			timeStamp = 8;
	double 				mileage = 9;			//distance in every frame.
	ExpData 			expData = 10;
	DistHeadway 		distHeadway = 11;
	Control 			control = 12;
	Planning			planning = 13;
	Acceleration		lateral_acc = 14;		//lateral acc, m/s2
	Acceleration		dec_acc = 15;			//deceleration, m/s2
}
// [END messages]