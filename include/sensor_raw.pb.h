// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_raw.proto

#ifndef PROTOBUF_INCLUDED_sensor_5fraw_2eproto
#define PROTOBUF_INCLUDED_sensor_5fraw_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensor_5fraw_2eproto 

namespace protobuf_sensor_5fraw_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensor_5fraw_2eproto
namespace sim_msg {
class CameraRaw;
class CameraRawDefaultTypeInternal;
extern CameraRawDefaultTypeInternal _CameraRaw_default_instance_;
class LidarRaw;
class LidarRawDefaultTypeInternal;
extern LidarRawDefaultTypeInternal _LidarRaw_default_instance_;
class LidarRaw_Point;
class LidarRaw_PointDefaultTypeInternal;
extern LidarRaw_PointDefaultTypeInternal _LidarRaw_Point_default_instance_;
class SensorPose;
class SensorPoseDefaultTypeInternal;
extern SensorPoseDefaultTypeInternal _SensorPose_default_instance_;
class SensorRaw;
class SensorRawDefaultTypeInternal;
extern SensorRawDefaultTypeInternal _SensorRaw_default_instance_;
class SensorRaw_Sensor;
class SensorRaw_SensorDefaultTypeInternal;
extern SensorRaw_SensorDefaultTypeInternal _SensorRaw_Sensor_default_instance_;
}  // namespace sim_msg
namespace google {
namespace protobuf {
template<> ::sim_msg::CameraRaw* Arena::CreateMaybeMessage<::sim_msg::CameraRaw>(Arena*);
template<> ::sim_msg::LidarRaw* Arena::CreateMaybeMessage<::sim_msg::LidarRaw>(Arena*);
template<> ::sim_msg::LidarRaw_Point* Arena::CreateMaybeMessage<::sim_msg::LidarRaw_Point>(Arena*);
template<> ::sim_msg::SensorPose* Arena::CreateMaybeMessage<::sim_msg::SensorPose>(Arena*);
template<> ::sim_msg::SensorRaw* Arena::CreateMaybeMessage<::sim_msg::SensorRaw>(Arena*);
template<> ::sim_msg::SensorRaw_Sensor* Arena::CreateMaybeMessage<::sim_msg::SensorRaw_Sensor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sim_msg {

enum LidarRaw_CoordType {
  LidarRaw_CoordType_COORD_SENSOR = 0,
  LidarRaw_CoordType_COORD_VEHICLE = 1,
  LidarRaw_CoordType_COORD_ENU = 2,
  LidarRaw_CoordType_LidarRaw_CoordType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LidarRaw_CoordType_LidarRaw_CoordType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LidarRaw_CoordType_IsValid(int value);
const LidarRaw_CoordType LidarRaw_CoordType_CoordType_MIN = LidarRaw_CoordType_COORD_SENSOR;
const LidarRaw_CoordType LidarRaw_CoordType_CoordType_MAX = LidarRaw_CoordType_COORD_ENU;
const int LidarRaw_CoordType_CoordType_ARRAYSIZE = LidarRaw_CoordType_CoordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LidarRaw_CoordType_descriptor();
inline const ::std::string& LidarRaw_CoordType_Name(LidarRaw_CoordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LidarRaw_CoordType_descriptor(), value);
}
inline bool LidarRaw_CoordType_Parse(
    const ::std::string& name, LidarRaw_CoordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LidarRaw_CoordType>(
    LidarRaw_CoordType_descriptor(), name, value);
}
enum SensorRaw_Type {
  SensorRaw_Type_TYPE_CAMERA = 0,
  SensorRaw_Type_TYPE_LIDAR = 1,
  SensorRaw_Type_TYPE_RADAR = 2,
  SensorRaw_Type_TYPE_ULTRASONIC = 3,
  SensorRaw_Type_TYPE_DEPTH = 4,
  SensorRaw_Type_TYPE_SEMANTIC = 5,
  SensorRaw_Type_TYPE_FISHEYE = 6,
  SensorRaw_Type_SensorRaw_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SensorRaw_Type_SensorRaw_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SensorRaw_Type_IsValid(int value);
const SensorRaw_Type SensorRaw_Type_Type_MIN = SensorRaw_Type_TYPE_CAMERA;
const SensorRaw_Type SensorRaw_Type_Type_MAX = SensorRaw_Type_TYPE_FISHEYE;
const int SensorRaw_Type_Type_ARRAYSIZE = SensorRaw_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorRaw_Type_descriptor();
inline const ::std::string& SensorRaw_Type_Name(SensorRaw_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorRaw_Type_descriptor(), value);
}
inline bool SensorRaw_Type_Parse(
    const ::std::string& name, SensorRaw_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorRaw_Type>(
    SensorRaw_Type_descriptor(), name, value);
}
// ===================================================================

class SensorPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.SensorPose) */ {
 public:
  SensorPose();
  virtual ~SensorPose();

  SensorPose(const SensorPose& from);

  inline SensorPose& operator=(const SensorPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorPose(SensorPose&& from) noexcept
    : SensorPose() {
    *this = ::std::move(from);
  }

  inline SensorPose& operator=(SensorPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorPose* internal_default_instance() {
    return reinterpret_cast<const SensorPose*>(
               &_SensorPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorPose* other);
  friend void swap(SensorPose& a, SensorPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorPose* New() const final {
    return CreateMaybeMessage<SensorPose>(NULL);
  }

  SensorPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorPose& from);
  void MergeFrom(const SensorPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double longitude = 1;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // double altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // float roll = 4;
  void clear_roll();
  static const int kRollFieldNumber = 4;
  float roll() const;
  void set_roll(float value);

  // float pitch = 5;
  void clear_pitch();
  static const int kPitchFieldNumber = 5;
  float pitch() const;
  void set_pitch(float value);

  // float yaw = 6;
  void clear_yaw();
  static const int kYawFieldNumber = 6;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:sim_msg.SensorPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  double altitude_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensor_5fraw_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraRaw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.CameraRaw) */ {
 public:
  CameraRaw();
  virtual ~CameraRaw();

  CameraRaw(const CameraRaw& from);

  inline CameraRaw& operator=(const CameraRaw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraRaw(CameraRaw&& from) noexcept
    : CameraRaw() {
    *this = ::std::move(from);
  }

  inline CameraRaw& operator=(CameraRaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraRaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraRaw* internal_default_instance() {
    return reinterpret_cast<const CameraRaw*>(
               &_CameraRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CameraRaw* other);
  friend void swap(CameraRaw& a, CameraRaw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraRaw* New() const final {
    return CreateMaybeMessage<CameraRaw>(NULL);
  }

  CameraRaw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraRaw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraRaw& from);
  void MergeFrom(const CameraRaw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraRaw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes image_data = 4;
  void clear_image_data();
  static const int kImageDataFieldNumber = 4;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  #if LANG_CXX11
  void set_image_data(::std::string&& value);
  #endif
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // .sim_msg.SensorPose pose = 7;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 7;
  private:
  const ::sim_msg::SensorPose& _internal_pose() const;
  public:
  const ::sim_msg::SensorPose& pose() const;
  ::sim_msg::SensorPose* release_pose();
  ::sim_msg::SensorPose* mutable_pose();
  void set_allocated_pose(::sim_msg::SensorPose* pose);

  // double timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.CameraRaw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  ::sim_msg::SensorPose* pose_;
  double timestamp_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensor_5fraw_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LidarRaw_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.LidarRaw.Point) */ {
 public:
  LidarRaw_Point();
  virtual ~LidarRaw_Point();

  LidarRaw_Point(const LidarRaw_Point& from);

  inline LidarRaw_Point& operator=(const LidarRaw_Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarRaw_Point(LidarRaw_Point&& from) noexcept
    : LidarRaw_Point() {
    *this = ::std::move(from);
  }

  inline LidarRaw_Point& operator=(LidarRaw_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarRaw_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarRaw_Point* internal_default_instance() {
    return reinterpret_cast<const LidarRaw_Point*>(
               &_LidarRaw_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LidarRaw_Point* other);
  friend void swap(LidarRaw_Point& a, LidarRaw_Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarRaw_Point* New() const final {
    return CreateMaybeMessage<LidarRaw_Point>(NULL);
  }

  LidarRaw_Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LidarRaw_Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LidarRaw_Point& from);
  void MergeFrom(const LidarRaw_Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarRaw_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float i = 4;
  void clear_i();
  static const int kIFieldNumber = 4;
  float i() const;
  void set_i(float value);

  // uint32 t = 5;
  void clear_t();
  static const int kTFieldNumber = 5;
  ::google::protobuf::uint32 t() const;
  void set_t(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.LidarRaw.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float i_;
  ::google::protobuf::uint32 t_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensor_5fraw_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LidarRaw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.LidarRaw) */ {
 public:
  LidarRaw();
  virtual ~LidarRaw();

  LidarRaw(const LidarRaw& from);

  inline LidarRaw& operator=(const LidarRaw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarRaw(LidarRaw&& from) noexcept
    : LidarRaw() {
    *this = ::std::move(from);
  }

  inline LidarRaw& operator=(LidarRaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarRaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarRaw* internal_default_instance() {
    return reinterpret_cast<const LidarRaw*>(
               &_LidarRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LidarRaw* other);
  friend void swap(LidarRaw& a, LidarRaw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarRaw* New() const final {
    return CreateMaybeMessage<LidarRaw>(NULL);
  }

  LidarRaw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LidarRaw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LidarRaw& from);
  void MergeFrom(const LidarRaw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarRaw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LidarRaw_Point Point;

  typedef LidarRaw_CoordType CoordType;
  static const CoordType COORD_SENSOR =
    LidarRaw_CoordType_COORD_SENSOR;
  static const CoordType COORD_VEHICLE =
    LidarRaw_CoordType_COORD_VEHICLE;
  static const CoordType COORD_ENU =
    LidarRaw_CoordType_COORD_ENU;
  static inline bool CoordType_IsValid(int value) {
    return LidarRaw_CoordType_IsValid(value);
  }
  static const CoordType CoordType_MIN =
    LidarRaw_CoordType_CoordType_MIN;
  static const CoordType CoordType_MAX =
    LidarRaw_CoordType_CoordType_MAX;
  static const int CoordType_ARRAYSIZE =
    LidarRaw_CoordType_CoordType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoordType_descriptor() {
    return LidarRaw_CoordType_descriptor();
  }
  static inline const ::std::string& CoordType_Name(CoordType value) {
    return LidarRaw_CoordType_Name(value);
  }
  static inline bool CoordType_Parse(const ::std::string& name,
      CoordType* value) {
    return LidarRaw_CoordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .sim_msg.LidarRaw.Point points = 4;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 4;
  ::sim_msg::LidarRaw_Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LidarRaw_Point >*
      mutable_points();
  const ::sim_msg::LidarRaw_Point& points(int index) const;
  ::sim_msg::LidarRaw_Point* add_points();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::LidarRaw_Point >&
      points() const;

  // bytes point_lists = 5;
  void clear_point_lists();
  static const int kPointListsFieldNumber = 5;
  const ::std::string& point_lists() const;
  void set_point_lists(const ::std::string& value);
  #if LANG_CXX11
  void set_point_lists(::std::string&& value);
  #endif
  void set_point_lists(const char* value);
  void set_point_lists(const void* value, size_t size);
  ::std::string* mutable_point_lists();
  ::std::string* release_point_lists();
  void set_allocated_point_lists(::std::string* point_lists);

  // .sim_msg.SensorPose pose_first = 7;
  bool has_pose_first() const;
  void clear_pose_first();
  static const int kPoseFirstFieldNumber = 7;
  private:
  const ::sim_msg::SensorPose& _internal_pose_first() const;
  public:
  const ::sim_msg::SensorPose& pose_first() const;
  ::sim_msg::SensorPose* release_pose_first();
  ::sim_msg::SensorPose* mutable_pose_first();
  void set_allocated_pose_first(::sim_msg::SensorPose* pose_first);

  // .sim_msg.SensorPose pose_last = 8;
  bool has_pose_last() const;
  void clear_pose_last();
  static const int kPoseLastFieldNumber = 8;
  private:
  const ::sim_msg::SensorPose& _internal_pose_last() const;
  public:
  const ::sim_msg::SensorPose& pose_last() const;
  ::sim_msg::SensorPose* release_pose_last();
  ::sim_msg::SensorPose* mutable_pose_last();
  void set_allocated_pose_last(::sim_msg::SensorPose* pose_last);

  // double timestamp_begin = 2;
  void clear_timestamp_begin();
  static const int kTimestampBeginFieldNumber = 2;
  double timestamp_begin() const;
  void set_timestamp_begin(double value);

  // double timestamp_end = 3;
  void clear_timestamp_end();
  static const int kTimestampEndFieldNumber = 3;
  double timestamp_end() const;
  void set_timestamp_end(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // uint32 count = 6;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // .sim_msg.LidarRaw.CoordType coord_type = 9;
  void clear_coord_type();
  static const int kCoordTypeFieldNumber = 9;
  ::sim_msg::LidarRaw_CoordType coord_type() const;
  void set_coord_type(::sim_msg::LidarRaw_CoordType value);

  // @@protoc_insertion_point(class_scope:sim_msg.LidarRaw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LidarRaw_Point > points_;
  ::google::protobuf::internal::ArenaStringPtr point_lists_;
  ::sim_msg::SensorPose* pose_first_;
  ::sim_msg::SensorPose* pose_last_;
  double timestamp_begin_;
  double timestamp_end_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 count_;
  int coord_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensor_5fraw_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorRaw_Sensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.SensorRaw.Sensor) */ {
 public:
  SensorRaw_Sensor();
  virtual ~SensorRaw_Sensor();

  SensorRaw_Sensor(const SensorRaw_Sensor& from);

  inline SensorRaw_Sensor& operator=(const SensorRaw_Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorRaw_Sensor(SensorRaw_Sensor&& from) noexcept
    : SensorRaw_Sensor() {
    *this = ::std::move(from);
  }

  inline SensorRaw_Sensor& operator=(SensorRaw_Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorRaw_Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorRaw_Sensor* internal_default_instance() {
    return reinterpret_cast<const SensorRaw_Sensor*>(
               &_SensorRaw_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SensorRaw_Sensor* other);
  friend void swap(SensorRaw_Sensor& a, SensorRaw_Sensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorRaw_Sensor* New() const final {
    return CreateMaybeMessage<SensorRaw_Sensor>(NULL);
  }

  SensorRaw_Sensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorRaw_Sensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorRaw_Sensor& from);
  void MergeFrom(const SensorRaw_Sensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorRaw_Sensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes raw = 3;
  void clear_raw();
  static const int kRawFieldNumber = 3;
  const ::std::string& raw() const;
  void set_raw(const ::std::string& value);
  #if LANG_CXX11
  void set_raw(::std::string&& value);
  #endif
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  ::std::string* mutable_raw();
  ::std::string* release_raw();
  void set_allocated_raw(::std::string* raw);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .sim_msg.SensorRaw.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::sim_msg::SensorRaw_Type type() const;
  void set_type(::sim_msg::SensorRaw_Type value);

  // @@protoc_insertion_point(class_scope:sim_msg.SensorRaw.Sensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_;
  ::google::protobuf::int32 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensor_5fraw_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorRaw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.SensorRaw) */ {
 public:
  SensorRaw();
  virtual ~SensorRaw();

  SensorRaw(const SensorRaw& from);

  inline SensorRaw& operator=(const SensorRaw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorRaw(SensorRaw&& from) noexcept
    : SensorRaw() {
    *this = ::std::move(from);
  }

  inline SensorRaw& operator=(SensorRaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorRaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorRaw* internal_default_instance() {
    return reinterpret_cast<const SensorRaw*>(
               &_SensorRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SensorRaw* other);
  friend void swap(SensorRaw& a, SensorRaw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorRaw* New() const final {
    return CreateMaybeMessage<SensorRaw>(NULL);
  }

  SensorRaw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorRaw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorRaw& from);
  void MergeFrom(const SensorRaw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorRaw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorRaw_Sensor Sensor;

  typedef SensorRaw_Type Type;
  static const Type TYPE_CAMERA =
    SensorRaw_Type_TYPE_CAMERA;
  static const Type TYPE_LIDAR =
    SensorRaw_Type_TYPE_LIDAR;
  static const Type TYPE_RADAR =
    SensorRaw_Type_TYPE_RADAR;
  static const Type TYPE_ULTRASONIC =
    SensorRaw_Type_TYPE_ULTRASONIC;
  static const Type TYPE_DEPTH =
    SensorRaw_Type_TYPE_DEPTH;
  static const Type TYPE_SEMANTIC =
    SensorRaw_Type_TYPE_SEMANTIC;
  static const Type TYPE_FISHEYE =
    SensorRaw_Type_TYPE_FISHEYE;
  static inline bool Type_IsValid(int value) {
    return SensorRaw_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SensorRaw_Type_Type_MIN;
  static const Type Type_MAX =
    SensorRaw_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SensorRaw_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SensorRaw_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SensorRaw_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SensorRaw_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .sim_msg.SensorRaw.Sensor sensor = 2;
  int sensor_size() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 2;
  ::sim_msg::SensorRaw_Sensor* mutable_sensor(int index);
  ::google::protobuf::RepeatedPtrField< ::sim_msg::SensorRaw_Sensor >*
      mutable_sensor();
  const ::sim_msg::SensorRaw_Sensor& sensor(int index) const;
  ::sim_msg::SensorRaw_Sensor* add_sensor();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::SensorRaw_Sensor >&
      sensor() const;

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.SensorRaw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::SensorRaw_Sensor > sensor_;
  double timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensor_5fraw_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorPose

// double longitude = 1;
inline void SensorPose::clear_longitude() {
  longitude_ = 0;
}
inline double SensorPose::longitude() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorPose.longitude)
  return longitude_;
}
inline void SensorPose::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorPose.longitude)
}

// double latitude = 2;
inline void SensorPose::clear_latitude() {
  latitude_ = 0;
}
inline double SensorPose::latitude() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorPose.latitude)
  return latitude_;
}
inline void SensorPose::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorPose.latitude)
}

// double altitude = 3;
inline void SensorPose::clear_altitude() {
  altitude_ = 0;
}
inline double SensorPose::altitude() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorPose.altitude)
  return altitude_;
}
inline void SensorPose::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorPose.altitude)
}

// float roll = 4;
inline void SensorPose::clear_roll() {
  roll_ = 0;
}
inline float SensorPose::roll() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorPose.roll)
  return roll_;
}
inline void SensorPose::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorPose.roll)
}

// float pitch = 5;
inline void SensorPose::clear_pitch() {
  pitch_ = 0;
}
inline float SensorPose::pitch() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorPose.pitch)
  return pitch_;
}
inline void SensorPose::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorPose.pitch)
}

// float yaw = 6;
inline void SensorPose::clear_yaw() {
  yaw_ = 0;
}
inline float SensorPose::yaw() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorPose.yaw)
  return yaw_;
}
inline void SensorPose::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorPose.yaw)
}

// -------------------------------------------------------------------

// CameraRaw

// int32 id = 1;
inline void CameraRaw::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CameraRaw::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.id)
  return id_;
}
inline void CameraRaw::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CameraRaw.id)
}

// double timestamp = 2;
inline void CameraRaw::clear_timestamp() {
  timestamp_ = 0;
}
inline double CameraRaw::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.timestamp)
  return timestamp_;
}
inline void CameraRaw::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CameraRaw.timestamp)
}

// string type = 3;
inline void CameraRaw::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraRaw::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.type)
  return type_.GetNoArena();
}
inline void CameraRaw::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.CameraRaw.type)
}
#if LANG_CXX11
inline void CameraRaw::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.CameraRaw.type)
}
#endif
inline void CameraRaw::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.CameraRaw.type)
}
inline void CameraRaw::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.CameraRaw.type)
}
inline ::std::string* CameraRaw::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.CameraRaw.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraRaw::release_type() {
  // @@protoc_insertion_point(field_release:sim_msg.CameraRaw.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraRaw::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.CameraRaw.type)
}

// bytes image_data = 4;
inline void CameraRaw::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraRaw::image_data() const {
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.image_data)
  return image_data_.GetNoArena();
}
inline void CameraRaw::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.CameraRaw.image_data)
}
#if LANG_CXX11
inline void CameraRaw::set_image_data(::std::string&& value) {
  
  image_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.CameraRaw.image_data)
}
#endif
inline void CameraRaw::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.CameraRaw.image_data)
}
inline void CameraRaw::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.CameraRaw.image_data)
}
inline ::std::string* CameraRaw::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.CameraRaw.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraRaw::release_image_data() {
  // @@protoc_insertion_point(field_release:sim_msg.CameraRaw.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraRaw::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.CameraRaw.image_data)
}

// int32 width = 5;
inline void CameraRaw::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CameraRaw::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.width)
  return width_;
}
inline void CameraRaw::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CameraRaw.width)
}

// int32 height = 6;
inline void CameraRaw::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CameraRaw::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.height)
  return height_;
}
inline void CameraRaw::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CameraRaw.height)
}

// .sim_msg.SensorPose pose = 7;
inline bool CameraRaw::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void CameraRaw::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
inline const ::sim_msg::SensorPose& CameraRaw::_internal_pose() const {
  return *pose_;
}
inline const ::sim_msg::SensorPose& CameraRaw::pose() const {
  const ::sim_msg::SensorPose* p = pose_;
  // @@protoc_insertion_point(field_get:sim_msg.CameraRaw.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::sim_msg::SensorPose*>(
      &::sim_msg::_SensorPose_default_instance_);
}
inline ::sim_msg::SensorPose* CameraRaw::release_pose() {
  // @@protoc_insertion_point(field_release:sim_msg.CameraRaw.pose)
  
  ::sim_msg::SensorPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::sim_msg::SensorPose* CameraRaw::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::sim_msg::SensorPose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.CameraRaw.pose)
  return pose_;
}
inline void CameraRaw::set_allocated_pose(::sim_msg::SensorPose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.CameraRaw.pose)
}

// -------------------------------------------------------------------

// LidarRaw_Point

// float x = 1;
inline void LidarRaw_Point::clear_x() {
  x_ = 0;
}
inline float LidarRaw_Point::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.Point.x)
  return x_;
}
inline void LidarRaw_Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.Point.x)
}

// float y = 2;
inline void LidarRaw_Point::clear_y() {
  y_ = 0;
}
inline float LidarRaw_Point::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.Point.y)
  return y_;
}
inline void LidarRaw_Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.Point.y)
}

// float z = 3;
inline void LidarRaw_Point::clear_z() {
  z_ = 0;
}
inline float LidarRaw_Point::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.Point.z)
  return z_;
}
inline void LidarRaw_Point::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.Point.z)
}

// float i = 4;
inline void LidarRaw_Point::clear_i() {
  i_ = 0;
}
inline float LidarRaw_Point::i() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.Point.i)
  return i_;
}
inline void LidarRaw_Point::set_i(float value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.Point.i)
}

// uint32 t = 5;
inline void LidarRaw_Point::clear_t() {
  t_ = 0u;
}
inline ::google::protobuf::uint32 LidarRaw_Point::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.Point.t)
  return t_;
}
inline void LidarRaw_Point::set_t(::google::protobuf::uint32 value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.Point.t)
}

// -------------------------------------------------------------------

// LidarRaw

// int32 id = 1;
inline void LidarRaw::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LidarRaw::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.id)
  return id_;
}
inline void LidarRaw::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.id)
}

// double timestamp_begin = 2;
inline void LidarRaw::clear_timestamp_begin() {
  timestamp_begin_ = 0;
}
inline double LidarRaw::timestamp_begin() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.timestamp_begin)
  return timestamp_begin_;
}
inline void LidarRaw::set_timestamp_begin(double value) {
  
  timestamp_begin_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.timestamp_begin)
}

// double timestamp_end = 3;
inline void LidarRaw::clear_timestamp_end() {
  timestamp_end_ = 0;
}
inline double LidarRaw::timestamp_end() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.timestamp_end)
  return timestamp_end_;
}
inline void LidarRaw::set_timestamp_end(double value) {
  
  timestamp_end_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.timestamp_end)
}

// repeated .sim_msg.LidarRaw.Point points = 4;
inline int LidarRaw::points_size() const {
  return points_.size();
}
inline void LidarRaw::clear_points() {
  points_.Clear();
}
inline ::sim_msg::LidarRaw_Point* LidarRaw::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LidarRaw.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::LidarRaw_Point >*
LidarRaw::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LidarRaw.points)
  return &points_;
}
inline const ::sim_msg::LidarRaw_Point& LidarRaw::points(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.points)
  return points_.Get(index);
}
inline ::sim_msg::LidarRaw_Point* LidarRaw::add_points() {
  // @@protoc_insertion_point(field_add:sim_msg.LidarRaw.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::LidarRaw_Point >&
LidarRaw::points() const {
  // @@protoc_insertion_point(field_list:sim_msg.LidarRaw.points)
  return points_;
}

// bytes point_lists = 5;
inline void LidarRaw::clear_point_lists() {
  point_lists_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LidarRaw::point_lists() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.point_lists)
  return point_lists_.GetNoArena();
}
inline void LidarRaw::set_point_lists(const ::std::string& value) {
  
  point_lists_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.point_lists)
}
#if LANG_CXX11
inline void LidarRaw::set_point_lists(::std::string&& value) {
  
  point_lists_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.LidarRaw.point_lists)
}
#endif
inline void LidarRaw::set_point_lists(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  point_lists_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.LidarRaw.point_lists)
}
inline void LidarRaw::set_point_lists(const void* value, size_t size) {
  
  point_lists_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.LidarRaw.point_lists)
}
inline ::std::string* LidarRaw::mutable_point_lists() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.LidarRaw.point_lists)
  return point_lists_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LidarRaw::release_point_lists() {
  // @@protoc_insertion_point(field_release:sim_msg.LidarRaw.point_lists)
  
  return point_lists_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LidarRaw::set_allocated_point_lists(::std::string* point_lists) {
  if (point_lists != NULL) {
    
  } else {
    
  }
  point_lists_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point_lists);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.LidarRaw.point_lists)
}

// uint32 count = 6;
inline void LidarRaw::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 LidarRaw::count() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.count)
  return count_;
}
inline void LidarRaw::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.count)
}

// .sim_msg.SensorPose pose_first = 7;
inline bool LidarRaw::has_pose_first() const {
  return this != internal_default_instance() && pose_first_ != NULL;
}
inline void LidarRaw::clear_pose_first() {
  if (GetArenaNoVirtual() == NULL && pose_first_ != NULL) {
    delete pose_first_;
  }
  pose_first_ = NULL;
}
inline const ::sim_msg::SensorPose& LidarRaw::_internal_pose_first() const {
  return *pose_first_;
}
inline const ::sim_msg::SensorPose& LidarRaw::pose_first() const {
  const ::sim_msg::SensorPose* p = pose_first_;
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.pose_first)
  return p != NULL ? *p : *reinterpret_cast<const ::sim_msg::SensorPose*>(
      &::sim_msg::_SensorPose_default_instance_);
}
inline ::sim_msg::SensorPose* LidarRaw::release_pose_first() {
  // @@protoc_insertion_point(field_release:sim_msg.LidarRaw.pose_first)
  
  ::sim_msg::SensorPose* temp = pose_first_;
  pose_first_ = NULL;
  return temp;
}
inline ::sim_msg::SensorPose* LidarRaw::mutable_pose_first() {
  
  if (pose_first_ == NULL) {
    auto* p = CreateMaybeMessage<::sim_msg::SensorPose>(GetArenaNoVirtual());
    pose_first_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.LidarRaw.pose_first)
  return pose_first_;
}
inline void LidarRaw::set_allocated_pose_first(::sim_msg::SensorPose* pose_first) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_first_;
  }
  if (pose_first) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose_first = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose_first, submessage_arena);
    }
    
  } else {
    
  }
  pose_first_ = pose_first;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.LidarRaw.pose_first)
}

// .sim_msg.SensorPose pose_last = 8;
inline bool LidarRaw::has_pose_last() const {
  return this != internal_default_instance() && pose_last_ != NULL;
}
inline void LidarRaw::clear_pose_last() {
  if (GetArenaNoVirtual() == NULL && pose_last_ != NULL) {
    delete pose_last_;
  }
  pose_last_ = NULL;
}
inline const ::sim_msg::SensorPose& LidarRaw::_internal_pose_last() const {
  return *pose_last_;
}
inline const ::sim_msg::SensorPose& LidarRaw::pose_last() const {
  const ::sim_msg::SensorPose* p = pose_last_;
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.pose_last)
  return p != NULL ? *p : *reinterpret_cast<const ::sim_msg::SensorPose*>(
      &::sim_msg::_SensorPose_default_instance_);
}
inline ::sim_msg::SensorPose* LidarRaw::release_pose_last() {
  // @@protoc_insertion_point(field_release:sim_msg.LidarRaw.pose_last)
  
  ::sim_msg::SensorPose* temp = pose_last_;
  pose_last_ = NULL;
  return temp;
}
inline ::sim_msg::SensorPose* LidarRaw::mutable_pose_last() {
  
  if (pose_last_ == NULL) {
    auto* p = CreateMaybeMessage<::sim_msg::SensorPose>(GetArenaNoVirtual());
    pose_last_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.LidarRaw.pose_last)
  return pose_last_;
}
inline void LidarRaw::set_allocated_pose_last(::sim_msg::SensorPose* pose_last) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_last_;
  }
  if (pose_last) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose_last = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose_last, submessage_arena);
    }
    
  } else {
    
  }
  pose_last_ = pose_last;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.LidarRaw.pose_last)
}

// .sim_msg.LidarRaw.CoordType coord_type = 9;
inline void LidarRaw::clear_coord_type() {
  coord_type_ = 0;
}
inline ::sim_msg::LidarRaw_CoordType LidarRaw::coord_type() const {
  // @@protoc_insertion_point(field_get:sim_msg.LidarRaw.coord_type)
  return static_cast< ::sim_msg::LidarRaw_CoordType >(coord_type_);
}
inline void LidarRaw::set_coord_type(::sim_msg::LidarRaw_CoordType value) {
  
  coord_type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LidarRaw.coord_type)
}

// -------------------------------------------------------------------

// SensorRaw_Sensor

// int32 id = 1;
inline void SensorRaw_Sensor::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SensorRaw_Sensor::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorRaw.Sensor.id)
  return id_;
}
inline void SensorRaw_Sensor::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorRaw.Sensor.id)
}

// .sim_msg.SensorRaw.Type type = 2;
inline void SensorRaw_Sensor::clear_type() {
  type_ = 0;
}
inline ::sim_msg::SensorRaw_Type SensorRaw_Sensor::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorRaw.Sensor.type)
  return static_cast< ::sim_msg::SensorRaw_Type >(type_);
}
inline void SensorRaw_Sensor::set_type(::sim_msg::SensorRaw_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorRaw.Sensor.type)
}

// bytes raw = 3;
inline void SensorRaw_Sensor::clear_raw() {
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorRaw_Sensor::raw() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorRaw.Sensor.raw)
  return raw_.GetNoArena();
}
inline void SensorRaw_Sensor::set_raw(const ::std::string& value) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.SensorRaw.Sensor.raw)
}
#if LANG_CXX11
inline void SensorRaw_Sensor::set_raw(::std::string&& value) {
  
  raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.SensorRaw.Sensor.raw)
}
#endif
inline void SensorRaw_Sensor::set_raw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.SensorRaw.Sensor.raw)
}
inline void SensorRaw_Sensor::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.SensorRaw.Sensor.raw)
}
inline ::std::string* SensorRaw_Sensor::mutable_raw() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.SensorRaw.Sensor.raw)
  return raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorRaw_Sensor::release_raw() {
  // @@protoc_insertion_point(field_release:sim_msg.SensorRaw.Sensor.raw)
  
  return raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorRaw_Sensor::set_allocated_raw(::std::string* raw) {
  if (raw != NULL) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.SensorRaw.Sensor.raw)
}

// -------------------------------------------------------------------

// SensorRaw

// double timestamp = 1;
inline void SensorRaw::clear_timestamp() {
  timestamp_ = 0;
}
inline double SensorRaw::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorRaw.timestamp)
  return timestamp_;
}
inline void SensorRaw::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SensorRaw.timestamp)
}

// repeated .sim_msg.SensorRaw.Sensor sensor = 2;
inline int SensorRaw::sensor_size() const {
  return sensor_.size();
}
inline void SensorRaw::clear_sensor() {
  sensor_.Clear();
}
inline ::sim_msg::SensorRaw_Sensor* SensorRaw::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.SensorRaw.sensor)
  return sensor_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::SensorRaw_Sensor >*
SensorRaw::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.SensorRaw.sensor)
  return &sensor_;
}
inline const ::sim_msg::SensorRaw_Sensor& SensorRaw::sensor(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorRaw.sensor)
  return sensor_.Get(index);
}
inline ::sim_msg::SensorRaw_Sensor* SensorRaw::add_sensor() {
  // @@protoc_insertion_point(field_add:sim_msg.SensorRaw.sensor)
  return sensor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::SensorRaw_Sensor >&
SensorRaw::sensor() const {
  // @@protoc_insertion_point(field_list:sim_msg.SensorRaw.sensor)
  return sensor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sim_msg::LidarRaw_CoordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::LidarRaw_CoordType>() {
  return ::sim_msg::LidarRaw_CoordType_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::SensorRaw_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::SensorRaw_Type>() {
  return ::sim_msg::SensorRaw_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensor_5fraw_2eproto
