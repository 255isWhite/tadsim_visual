// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_raw.proto

#include "sensor_raw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensor_5fraw_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensor_5fraw_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LidarRaw_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensor_5fraw_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorPose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensor_5fraw_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorRaw_Sensor;
}  // namespace protobuf_sensor_5fraw_2eproto
namespace sim_msg {
class SensorPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorPose>
      _instance;
} _SensorPose_default_instance_;
class CameraRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraRaw>
      _instance;
} _CameraRaw_default_instance_;
class LidarRaw_PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarRaw_Point>
      _instance;
} _LidarRaw_Point_default_instance_;
class LidarRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarRaw>
      _instance;
} _LidarRaw_default_instance_;
class SensorRaw_SensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorRaw_Sensor>
      _instance;
} _SensorRaw_Sensor_default_instance_;
class SensorRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorRaw>
      _instance;
} _SensorRaw_default_instance_;
}  // namespace sim_msg
namespace protobuf_sensor_5fraw_2eproto {
static void InitDefaultsSensorPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SensorPose_default_instance_;
    new (ptr) ::sim_msg::SensorPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SensorPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorPose}, {}};

static void InitDefaultsCameraRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_CameraRaw_default_instance_;
    new (ptr) ::sim_msg::CameraRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::CameraRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CameraRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCameraRaw}, {
      &protobuf_sensor_5fraw_2eproto::scc_info_SensorPose.base,}};

static void InitDefaultsLidarRaw_Point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_LidarRaw_Point_default_instance_;
    new (ptr) ::sim_msg::LidarRaw_Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::LidarRaw_Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LidarRaw_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLidarRaw_Point}, {}};

static void InitDefaultsLidarRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_LidarRaw_default_instance_;
    new (ptr) ::sim_msg::LidarRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::LidarRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LidarRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLidarRaw}, {
      &protobuf_sensor_5fraw_2eproto::scc_info_LidarRaw_Point.base,
      &protobuf_sensor_5fraw_2eproto::scc_info_SensorPose.base,}};

static void InitDefaultsSensorRaw_Sensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SensorRaw_Sensor_default_instance_;
    new (ptr) ::sim_msg::SensorRaw_Sensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SensorRaw_Sensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorRaw_Sensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorRaw_Sensor}, {}};

static void InitDefaultsSensorRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SensorRaw_default_instance_;
    new (ptr) ::sim_msg::SensorRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SensorRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorRaw}, {
      &protobuf_sensor_5fraw_2eproto::scc_info_SensorRaw_Sensor.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LidarRaw_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LidarRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorRaw_Sensor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorRaw.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorPose, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, image_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::CameraRaw, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw_Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw_Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw_Point, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw_Point, i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw_Point, t_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, timestamp_begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, timestamp_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, point_lists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, pose_first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, pose_last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::LidarRaw, coord_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw_Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw_Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw_Sensor, raw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sim_msg::SensorRaw, sensor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::SensorPose)},
  { 11, -1, sizeof(::sim_msg::CameraRaw)},
  { 23, -1, sizeof(::sim_msg::LidarRaw_Point)},
  { 33, -1, sizeof(::sim_msg::LidarRaw)},
  { 47, -1, sizeof(::sim_msg::SensorRaw_Sensor)},
  { 55, -1, sizeof(::sim_msg::SensorRaw)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sim_msg::_SensorPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sim_msg::_CameraRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sim_msg::_LidarRaw_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sim_msg::_LidarRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sim_msg::_SensorRaw_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sim_msg::_SensorRaw_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensor_raw.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020sensor_raw.proto\022\007sim_msg\"m\n\nSensorPos"
      "e\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020"
      "\n\010altitude\030\003 \001(\001\022\014\n\004roll\030\004 \001(\002\022\r\n\005pitch\030"
      "\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\216\001\n\tCameraRaw\022\n\n\002id\030\001"
      " \001(\005\022\021\n\ttimestamp\030\002 \001(\001\022\014\n\004type\030\003 \001(\t\022\022\n"
      "\nimage_data\030\004 \001(\014\022\r\n\005width\030\005 \001(\005\022\016\n\006heig"
      "ht\030\006 \001(\005\022!\n\004pose\030\007 \001(\0132\023.sim_msg.SensorP"
      "ose\"\226\003\n\010LidarRaw\022\n\n\002id\030\001 \001(\005\022\027\n\017timestam"
      "p_begin\030\002 \001(\001\022\025\n\rtimestamp_end\030\003 \001(\001\022\'\n\006"
      "points\030\004 \003(\0132\027.sim_msg.LidarRaw.Point\022\023\n"
      "\013point_lists\030\005 \001(\014\022\r\n\005count\030\006 \001(\r\022\'\n\npos"
      "e_first\030\007 \001(\0132\023.sim_msg.SensorPose\022&\n\tpo"
      "se_last\030\010 \001(\0132\023.sim_msg.SensorPose\022/\n\nco"
      "ord_type\030\t \001(\0162\033.sim_msg.LidarRaw.CoordT"
      "ype\032>\n\005Point\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030"
      "\003 \001(\002\022\t\n\001i\030\004 \001(\002\022\t\n\001t\030\005 \001(\r\"\?\n\tCoordType"
      "\022\020\n\014COORD_SENSOR\020\000\022\021\n\rCOORD_VEHICLE\020\001\022\r\n"
      "\tCOORD_ENU\020\002\"\227\002\n\tSensorRaw\022\021\n\ttimestamp\030"
      "\001 \001(\001\022)\n\006sensor\030\002 \003(\0132\031.sim_msg.SensorRa"
      "w.Sensor\032H\n\006Sensor\022\n\n\002id\030\001 \001(\005\022%\n\004type\030\002"
      " \001(\0162\027.sim_msg.SensorRaw.Type\022\013\n\003raw\030\003 \001"
      "(\014\"\201\001\n\004Type\022\017\n\013TYPE_CAMERA\020\000\022\016\n\nTYPE_LID"
      "AR\020\001\022\016\n\nTYPE_RADAR\020\002\022\023\n\017TYPE_ULTRASONIC\020"
      "\003\022\016\n\nTYPE_DEPTH\020\004\022\021\n\rTYPE_SEMANTIC\020\005\022\020\n\014"
      "TYPE_FISHEYE\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 982);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor_raw.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensor_5fraw_2eproto
namespace sim_msg {
const ::google::protobuf::EnumDescriptor* LidarRaw_CoordType_descriptor() {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fraw_2eproto::file_level_enum_descriptors[0];
}
bool LidarRaw_CoordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LidarRaw_CoordType LidarRaw::COORD_SENSOR;
const LidarRaw_CoordType LidarRaw::COORD_VEHICLE;
const LidarRaw_CoordType LidarRaw::COORD_ENU;
const LidarRaw_CoordType LidarRaw::CoordType_MIN;
const LidarRaw_CoordType LidarRaw::CoordType_MAX;
const int LidarRaw::CoordType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SensorRaw_Type_descriptor() {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fraw_2eproto::file_level_enum_descriptors[1];
}
bool SensorRaw_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorRaw_Type SensorRaw::TYPE_CAMERA;
const SensorRaw_Type SensorRaw::TYPE_LIDAR;
const SensorRaw_Type SensorRaw::TYPE_RADAR;
const SensorRaw_Type SensorRaw::TYPE_ULTRASONIC;
const SensorRaw_Type SensorRaw::TYPE_DEPTH;
const SensorRaw_Type SensorRaw::TYPE_SEMANTIC;
const SensorRaw_Type SensorRaw::TYPE_FISHEYE;
const SensorRaw_Type SensorRaw::Type_MIN;
const SensorRaw_Type SensorRaw::Type_MAX;
const int SensorRaw::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SensorPose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorPose::kLongitudeFieldNumber;
const int SensorPose::kLatitudeFieldNumber;
const int SensorPose::kAltitudeFieldNumber;
const int SensorPose::kRollFieldNumber;
const int SensorPose::kPitchFieldNumber;
const int SensorPose::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorPose::SensorPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fraw_2eproto::scc_info_SensorPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SensorPose)
}
SensorPose::SensorPose(const SensorPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.SensorPose)
}

void SensorPose::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(yaw_));
}

SensorPose::~SensorPose() {
  // @@protoc_insertion_point(destructor:sim_msg.SensorPose)
  SharedDtor();
}

void SensorPose::SharedDtor() {
}

void SensorPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorPose::descriptor() {
  ::protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorPose& SensorPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fraw_2eproto::scc_info_SensorPose.base);
  return *internal_default_instance();
}


void SensorPose::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SensorPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

bool SensorPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SensorPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SensorPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SensorPose)
  return false;
#undef DO_
}

void SensorPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SensorPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // float yaw = 6;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SensorPose)
}

::google::protobuf::uint8* SensorPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SensorPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // float yaw = 6;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SensorPose)
  return target;
}

size_t SensorPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SensorPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // float roll = 4;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SensorPose)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SensorPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SensorPose)
    MergeFrom(*source);
  }
}

void SensorPose::MergeFrom(const SensorPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SensorPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void SensorPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SensorPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorPose::CopyFrom(const SensorPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SensorPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPose::IsInitialized() const {
  return true;
}

void SensorPose::Swap(SensorPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorPose::InternalSwap(SensorPose* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorPose::GetMetadata() const {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraRaw::InitAsDefaultInstance() {
  ::sim_msg::_CameraRaw_default_instance_._instance.get_mutable()->pose_ = const_cast< ::sim_msg::SensorPose*>(
      ::sim_msg::SensorPose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraRaw::kIdFieldNumber;
const int CameraRaw::kTimestampFieldNumber;
const int CameraRaw::kTypeFieldNumber;
const int CameraRaw::kImageDataFieldNumber;
const int CameraRaw::kWidthFieldNumber;
const int CameraRaw::kHeightFieldNumber;
const int CameraRaw::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraRaw::CameraRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fraw_2eproto::scc_info_CameraRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.CameraRaw)
}
CameraRaw::CameraRaw(const CameraRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_data().size() > 0) {
    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.has_pose()) {
    pose_ = new ::sim_msg::SensorPose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.CameraRaw)
}

void CameraRaw::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(height_));
}

CameraRaw::~CameraRaw() {
  // @@protoc_insertion_point(destructor:sim_msg.CameraRaw)
  SharedDtor();
}

void CameraRaw::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void CameraRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraRaw::descriptor() {
  ::protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraRaw& CameraRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fraw_2eproto::scc_info_CameraRaw.base);
  return *internal_default_instance();
}


void CameraRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.CameraRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool CameraRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.CameraRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sim_msg.CameraRaw.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorPose pose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.CameraRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.CameraRaw)
  return false;
#undef DO_
}

void CameraRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.CameraRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.CameraRaw.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // bytes image_data = 4;
  if (this->image_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->image_data(), output);
  }

  // int32 width = 5;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // int32 height = 6;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // .sim_msg.SensorPose pose = 7;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_pose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.CameraRaw)
}

::google::protobuf::uint8* CameraRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.CameraRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.CameraRaw.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // bytes image_data = 4;
  if (this->image_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->image_data(), target);
  }

  // int32 width = 5;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // int32 height = 6;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // .sim_msg.SensorPose pose = 7;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_pose(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.CameraRaw)
  return target;
}

size_t CameraRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.CameraRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes image_data = 4;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  // .sim_msg.SensorPose pose = 7;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 width = 5;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 6;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.CameraRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.CameraRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.CameraRaw)
    MergeFrom(*source);
  }
}

void CameraRaw::MergeFrom(const CameraRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.CameraRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.has_pose()) {
    mutable_pose()->::sim_msg::SensorPose::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void CameraRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.CameraRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraRaw::CopyFrom(const CameraRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.CameraRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraRaw::IsInitialized() const {
  return true;
}

void CameraRaw::Swap(CameraRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraRaw::InternalSwap(CameraRaw* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_data_.Swap(&other->image_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraRaw::GetMetadata() const {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarRaw_Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarRaw_Point::kXFieldNumber;
const int LidarRaw_Point::kYFieldNumber;
const int LidarRaw_Point::kZFieldNumber;
const int LidarRaw_Point::kIFieldNumber;
const int LidarRaw_Point::kTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarRaw_Point::LidarRaw_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fraw_2eproto::scc_info_LidarRaw_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LidarRaw.Point)
}
LidarRaw_Point::LidarRaw_Point(const LidarRaw_Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LidarRaw.Point)
}

void LidarRaw_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
}

LidarRaw_Point::~LidarRaw_Point() {
  // @@protoc_insertion_point(destructor:sim_msg.LidarRaw.Point)
  SharedDtor();
}

void LidarRaw_Point::SharedDtor() {
}

void LidarRaw_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LidarRaw_Point::descriptor() {
  ::protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarRaw_Point& LidarRaw_Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fraw_2eproto::scc_info_LidarRaw_Point.base);
  return *internal_default_instance();
}


void LidarRaw_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LidarRaw.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

bool LidarRaw_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LidarRaw.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float i = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 t = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LidarRaw.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LidarRaw.Point)
  return false;
#undef DO_
}

void LidarRaw_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LidarRaw.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float i = 4;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->i(), output);
  }

  // uint32 t = 5;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->t(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.LidarRaw.Point)
}

::google::protobuf::uint8* LidarRaw_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LidarRaw.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float i = 4;
  if (this->i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->i(), target);
  }

  // uint32 t = 5;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->t(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LidarRaw.Point)
  return target;
}

size_t LidarRaw_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LidarRaw.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float i = 4;
  if (this->i() != 0) {
    total_size += 1 + 4;
  }

  // uint32 t = 5;
  if (this->t() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->t());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarRaw_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LidarRaw.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarRaw_Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarRaw_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LidarRaw.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LidarRaw.Point)
    MergeFrom(*source);
  }
}

void LidarRaw_Point::MergeFrom(const LidarRaw_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LidarRaw.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.i() != 0) {
    set_i(from.i());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void LidarRaw_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LidarRaw.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarRaw_Point::CopyFrom(const LidarRaw_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LidarRaw.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarRaw_Point::IsInitialized() const {
  return true;
}

void LidarRaw_Point::Swap(LidarRaw_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarRaw_Point::InternalSwap(LidarRaw_Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(i_, other->i_);
  swap(t_, other->t_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LidarRaw_Point::GetMetadata() const {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarRaw::InitAsDefaultInstance() {
  ::sim_msg::_LidarRaw_default_instance_._instance.get_mutable()->pose_first_ = const_cast< ::sim_msg::SensorPose*>(
      ::sim_msg::SensorPose::internal_default_instance());
  ::sim_msg::_LidarRaw_default_instance_._instance.get_mutable()->pose_last_ = const_cast< ::sim_msg::SensorPose*>(
      ::sim_msg::SensorPose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarRaw::kIdFieldNumber;
const int LidarRaw::kTimestampBeginFieldNumber;
const int LidarRaw::kTimestampEndFieldNumber;
const int LidarRaw::kPointsFieldNumber;
const int LidarRaw::kPointListsFieldNumber;
const int LidarRaw::kCountFieldNumber;
const int LidarRaw::kPoseFirstFieldNumber;
const int LidarRaw::kPoseLastFieldNumber;
const int LidarRaw::kCoordTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarRaw::LidarRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fraw_2eproto::scc_info_LidarRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LidarRaw)
}
LidarRaw::LidarRaw(const LidarRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  point_lists_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.point_lists().size() > 0) {
    point_lists_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.point_lists_);
  }
  if (from.has_pose_first()) {
    pose_first_ = new ::sim_msg::SensorPose(*from.pose_first_);
  } else {
    pose_first_ = NULL;
  }
  if (from.has_pose_last()) {
    pose_last_ = new ::sim_msg::SensorPose(*from.pose_last_);
  } else {
    pose_last_ = NULL;
  }
  ::memcpy(&timestamp_begin_, &from.timestamp_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&coord_type_) -
    reinterpret_cast<char*>(&timestamp_begin_)) + sizeof(coord_type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LidarRaw)
}

void LidarRaw::SharedCtor() {
  point_lists_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coord_type_) -
      reinterpret_cast<char*>(&pose_first_)) + sizeof(coord_type_));
}

LidarRaw::~LidarRaw() {
  // @@protoc_insertion_point(destructor:sim_msg.LidarRaw)
  SharedDtor();
}

void LidarRaw::SharedDtor() {
  point_lists_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_first_;
  if (this != internal_default_instance()) delete pose_last_;
}

void LidarRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LidarRaw::descriptor() {
  ::protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarRaw& LidarRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fraw_2eproto::scc_info_LidarRaw.base);
  return *internal_default_instance();
}


void LidarRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LidarRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  point_lists_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_first_ != NULL) {
    delete pose_first_;
  }
  pose_first_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_last_ != NULL) {
    delete pose_last_;
  }
  pose_last_ = NULL;
  ::memset(&timestamp_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coord_type_) -
      reinterpret_cast<char*>(&timestamp_begin_)) + sizeof(coord_type_));
  _internal_metadata_.Clear();
}

bool LidarRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LidarRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp_begin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp_end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.LidarRaw.Point points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes point_lists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_lists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorPose pose_first = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorPose pose_last = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_last()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.LidarRaw.CoordType coord_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coord_type(static_cast< ::sim_msg::LidarRaw_CoordType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LidarRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LidarRaw)
  return false;
#undef DO_
}

void LidarRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LidarRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double timestamp_begin = 2;
  if (this->timestamp_begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp_begin(), output);
  }

  // double timestamp_end = 3;
  if (this->timestamp_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp_end(), output);
  }

  // repeated .sim_msg.LidarRaw.Point points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->points(static_cast<int>(i)),
      output);
  }

  // bytes point_lists = 5;
  if (this->point_lists().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->point_lists(), output);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // .sim_msg.SensorPose pose_first = 7;
  if (this->has_pose_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_pose_first(), output);
  }

  // .sim_msg.SensorPose pose_last = 8;
  if (this->has_pose_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_pose_last(), output);
  }

  // .sim_msg.LidarRaw.CoordType coord_type = 9;
  if (this->coord_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->coord_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.LidarRaw)
}

::google::protobuf::uint8* LidarRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LidarRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double timestamp_begin = 2;
  if (this->timestamp_begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp_begin(), target);
  }

  // double timestamp_end = 3;
  if (this->timestamp_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp_end(), target);
  }

  // repeated .sim_msg.LidarRaw.Point points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->points(static_cast<int>(i)), deterministic, target);
  }

  // bytes point_lists = 5;
  if (this->point_lists().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->point_lists(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // .sim_msg.SensorPose pose_first = 7;
  if (this->has_pose_first()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_pose_first(), deterministic, target);
  }

  // .sim_msg.SensorPose pose_last = 8;
  if (this->has_pose_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_pose_last(), deterministic, target);
  }

  // .sim_msg.LidarRaw.CoordType coord_type = 9;
  if (this->coord_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->coord_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LidarRaw)
  return target;
}

size_t LidarRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LidarRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sim_msg.LidarRaw.Point points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // bytes point_lists = 5;
  if (this->point_lists().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->point_lists());
  }

  // .sim_msg.SensorPose pose_first = 7;
  if (this->has_pose_first()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_first_);
  }

  // .sim_msg.SensorPose pose_last = 8;
  if (this->has_pose_last()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_last_);
  }

  // double timestamp_begin = 2;
  if (this->timestamp_begin() != 0) {
    total_size += 1 + 8;
  }

  // double timestamp_end = 3;
  if (this->timestamp_end() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // .sim_msg.LidarRaw.CoordType coord_type = 9;
  if (this->coord_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coord_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LidarRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LidarRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LidarRaw)
    MergeFrom(*source);
  }
}

void LidarRaw::MergeFrom(const LidarRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LidarRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.point_lists().size() > 0) {

    point_lists_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.point_lists_);
  }
  if (from.has_pose_first()) {
    mutable_pose_first()->::sim_msg::SensorPose::MergeFrom(from.pose_first());
  }
  if (from.has_pose_last()) {
    mutable_pose_last()->::sim_msg::SensorPose::MergeFrom(from.pose_last());
  }
  if (from.timestamp_begin() != 0) {
    set_timestamp_begin(from.timestamp_begin());
  }
  if (from.timestamp_end() != 0) {
    set_timestamp_end(from.timestamp_end());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.coord_type() != 0) {
    set_coord_type(from.coord_type());
  }
}

void LidarRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LidarRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarRaw::CopyFrom(const LidarRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LidarRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarRaw::IsInitialized() const {
  return true;
}

void LidarRaw::Swap(LidarRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarRaw::InternalSwap(LidarRaw* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  point_lists_.Swap(&other->point_lists_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_first_, other->pose_first_);
  swap(pose_last_, other->pose_last_);
  swap(timestamp_begin_, other->timestamp_begin_);
  swap(timestamp_end_, other->timestamp_end_);
  swap(id_, other->id_);
  swap(count_, other->count_);
  swap(coord_type_, other->coord_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LidarRaw::GetMetadata() const {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorRaw_Sensor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorRaw_Sensor::kIdFieldNumber;
const int SensorRaw_Sensor::kTypeFieldNumber;
const int SensorRaw_Sensor::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorRaw_Sensor::SensorRaw_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fraw_2eproto::scc_info_SensorRaw_Sensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SensorRaw.Sensor)
}
SensorRaw_Sensor::SensorRaw_Sensor(const SensorRaw_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.SensorRaw.Sensor)
}

void SensorRaw_Sensor::SharedCtor() {
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

SensorRaw_Sensor::~SensorRaw_Sensor() {
  // @@protoc_insertion_point(destructor:sim_msg.SensorRaw.Sensor)
  SharedDtor();
}

void SensorRaw_Sensor::SharedDtor() {
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorRaw_Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorRaw_Sensor::descriptor() {
  ::protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorRaw_Sensor& SensorRaw_Sensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fraw_2eproto::scc_info_SensorRaw_Sensor.base);
  return *internal_default_instance();
}


void SensorRaw_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SensorRaw.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool SensorRaw_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SensorRaw.Sensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorRaw.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sim_msg::SensorRaw_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SensorRaw.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SensorRaw.Sensor)
  return false;
#undef DO_
}

void SensorRaw_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SensorRaw.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .sim_msg.SensorRaw.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // bytes raw = 3;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->raw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SensorRaw.Sensor)
}

::google::protobuf::uint8* SensorRaw_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SensorRaw.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .sim_msg.SensorRaw.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // bytes raw = 3;
  if (this->raw().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->raw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SensorRaw.Sensor)
  return target;
}

size_t SensorRaw_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SensorRaw.Sensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes raw = 3;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .sim_msg.SensorRaw.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorRaw_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SensorRaw.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorRaw_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorRaw_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SensorRaw.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SensorRaw.Sensor)
    MergeFrom(*source);
  }
}

void SensorRaw_Sensor::MergeFrom(const SensorRaw_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SensorRaw.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SensorRaw_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SensorRaw.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorRaw_Sensor::CopyFrom(const SensorRaw_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SensorRaw.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRaw_Sensor::IsInitialized() const {
  return true;
}

void SensorRaw_Sensor::Swap(SensorRaw_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorRaw_Sensor::InternalSwap(SensorRaw_Sensor* other) {
  using std::swap;
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorRaw_Sensor::GetMetadata() const {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorRaw::kTimestampFieldNumber;
const int SensorRaw::kSensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorRaw::SensorRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fraw_2eproto::scc_info_SensorRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SensorRaw)
}
SensorRaw::SensorRaw(const SensorRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_(from.sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.SensorRaw)
}

void SensorRaw::SharedCtor() {
  timestamp_ = 0;
}

SensorRaw::~SensorRaw() {
  // @@protoc_insertion_point(destructor:sim_msg.SensorRaw)
  SharedDtor();
}

void SensorRaw::SharedDtor() {
}

void SensorRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorRaw::descriptor() {
  ::protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorRaw& SensorRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fraw_2eproto::scc_info_SensorRaw.base);
  return *internal_default_instance();
}


void SensorRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SensorRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_.Clear();
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

bool SensorRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SensorRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.SensorRaw.Sensor sensor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SensorRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SensorRaw)
  return false;
#undef DO_
}

void SensorRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SensorRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // repeated .sim_msg.SensorRaw.Sensor sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sensor(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SensorRaw)
}

::google::protobuf::uint8* SensorRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SensorRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // repeated .sim_msg.SensorRaw.Sensor sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sensor(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SensorRaw)
  return target;
}

size_t SensorRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SensorRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sim_msg.SensorRaw.Sensor sensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor(static_cast<int>(i)));
    }
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SensorRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SensorRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SensorRaw)
    MergeFrom(*source);
  }
}

void SensorRaw::MergeFrom(const SensorRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SensorRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_.MergeFrom(from.sensor_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SensorRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SensorRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorRaw::CopyFrom(const SensorRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SensorRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRaw::IsInitialized() const {
  return true;
}

void SensorRaw::Swap(SensorRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorRaw::InternalSwap(SensorRaw* other) {
  using std::swap;
  CastToBase(&sensor_)->InternalSwap(CastToBase(&other->sensor_));
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorRaw::GetMetadata() const {
  protobuf_sensor_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sim_msg::SensorPose* Arena::CreateMaybeMessage< ::sim_msg::SensorPose >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SensorPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sim_msg::CameraRaw* Arena::CreateMaybeMessage< ::sim_msg::CameraRaw >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::CameraRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sim_msg::LidarRaw_Point* Arena::CreateMaybeMessage< ::sim_msg::LidarRaw_Point >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::LidarRaw_Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sim_msg::LidarRaw* Arena::CreateMaybeMessage< ::sim_msg::LidarRaw >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::LidarRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sim_msg::SensorRaw_Sensor* Arena::CreateMaybeMessage< ::sim_msg::SensorRaw_Sensor >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SensorRaw_Sensor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sim_msg::SensorRaw* Arena::CreateMaybeMessage< ::sim_msg::SensorRaw >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SensorRaw >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
